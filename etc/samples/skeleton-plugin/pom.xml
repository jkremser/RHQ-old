<?xml version="1.0"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

   <modelVersion>4.0.0</modelVersion>

   <groupId>org.rhq.sample.skeletonplugin</groupId>
   <artifactId>skeleton-plugin</artifactId>
   <version>1.0</version>
   <packaging>jar</packaging>

   <name>Skeleton RHQ Plugin Template</name>
   <description>A template for building a custom RHQ agent plugin</description>

   <properties>
      <rhq.version>3.0.0-SNAPSHOT</rhq.version>
   </properties>

   <dependencies>

      <!-- Below are the core modules that are required dependencies of all plugins -->
      <dependency>
         <groupId>org.rhq</groupId>
         <artifactId>rhq-core-domain</artifactId>
         <version>${rhq.version}</version>
         <scope>provided</scope> <!-- provided by the agent/plugin-container -->
      </dependency>

      <dependency>
         <groupId>org.rhq</groupId>
         <artifactId>rhq-core-plugin-api</artifactId>
         <version>${rhq.version}</version>
         <scope>provided</scope> <!-- provided by the agent/plugin-container -->
      </dependency>

      <dependency>
         <groupId>org.rhq</groupId>
         <artifactId>rhq-core-native-system</artifactId>
         <version>${rhq.version}</version>
         <scope>provided</scope> <!-- provided by the agent/plugin-container -->
      </dependency>

      <!-- Fix for the Javac bug requiring annotations to be available when compiling classes. (fixed in JDK 6) -->
      <dependency>
         <groupId>javax.persistence</groupId>
         <artifactId>persistence-api</artifactId>
         <version>1.0</version>
         <scope>provided</scope> <!-- provided by the agent/plugin-container -->
      </dependency>

      <!-- Fix for the Javac bug requiring annotations to be available when compiling classes. (fixed in JDK 6) -->
      <dependency>
         <groupId>hibernate-annotations</groupId>
         <artifactId>hibernate-annotations</artifactId>
         <version>3.2.1.GA</version>
         <scope>provided</scope> <!-- provided by the agent/plugin-container -->
      </dependency>

      <!-- Fix for the Javac bug requiring annotations to be available when compiling classes. (fixed in JDK 6) -->
      <dependency>
         <groupId>javax.xml.bind</groupId>
         <artifactId>jaxb-api</artifactId>
         <version>2.1</version>
         <scope>provided</scope> <!-- provided by the agent/plugin-container -->
      </dependency>

      <!--
         Uncomment the one of the three logging systems your plugin uses: log4j, commons-logging or i18nlog
         All three are provided to your plugin by the agent/plugin-container.
      -->
      <dependency>
         <groupId>commons-logging</groupId>
         <artifactId>commons-logging</artifactId>
         <version>1.1</version>
         <scope>provided</scope>
      </dependency>

      <!--
      <dependency>
         <groupId>log4j</groupId>
         <artifactId>log4j</artifactId>
         <version>1.2.14</version>
         <scope>provided</scope>
      </dependency>
      -->

      <!--
      <dependency>
         <groupId>i18nlog</groupId>
         <artifactId>i18nlog</artifactId>
         <version>1.0.9</version>
         <scope>provided</scope>
      </dependency>
      -->

      <!-- Define any third-party dependencies your plugin has here. -->
      <!--
      <dependency>
         <groupId>group-id-of-dependency-goes-here</groupId>
         <artifactId>artifact-id-of-dependency-goes-here</artifactId>
         <version>version-of-dependency-goes-here</version>
      </dependency>
      -->

   </dependencies>

   <build>
      <plugins>

         <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
               <source>1.5</source>
               <target>1.5</target>
            </configuration>
         </plugin>

         <!--
            If your plugin has third-party jar dependencies that are not already available when deployed in the plugin
            container, you can package these jars in your plugin. They go in your plugin jar's "lib" directory.
            Uncomment the maven plugin definition below and define one or more jar files (aka "artifactItem" elements)
            that you want to include in your plugin jar.
         -->
         <!--
         <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
               <execution>
                  <id>copy-dependencies</id>
                  <phase>process-resources</phase>
                  <goals>
                     <goal>copy</goal>
                  </goals>
                  <configuration>
                     <artifactItems>
                        <artifactItem>
                           <groupId>your-third-party-dep-group</groupId>
                           <artifactId>your-third-party-dep-artifact</artifactId>
                           <version>your-third-party-dep-version</version>
                        </artifactItem>
                     </artifactItems>
                     <outputDirectory>${project.build.outputDirectory}/lib</outputDirectory>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         -->

      </plugins>
   </build>

   <profiles>
      <profile>
         <id>dev</id>
         <properties>
            <!-- define the location of your RHQ root directory - typically rhq.rootDir is overridden in Maven's settings.xml -->
            <rhq.rootDir>/rhq/trunk</rhq.rootDir>
            <rhq.defaultDevContainerPath>dev-container</rhq.defaultDevContainerPath>
            <rhq.containerDir>${rhq.rootDir}/${rhq.defaultDevContainerPath}</rhq.containerDir>
            <rhq.deploymentDir>${rhq.containerDir}/jbossas/server/default/deploy/rhq.ear/rhq-downloads/rhq-plugins</rhq.deploymentDir>
         </properties>
         <build>
            <plugins>
               <plugin>
                  <artifactId>maven-antrun-plugin</artifactId>
                  <version>1.1</version>
                  <executions>
                     <execution>
                        <id>deploy</id>
                        <phase>compile</phase>
                        <configuration>
                           <tasks>
                              <mkdir dir="${rhq.deploymentDir}" />
                              <property name="deployment.file" location="${rhq.deploymentDir}/${project.build.finalName}.jar" />
                              <echo>*** Updating ${deployment.file}...</echo>
                              <jar destfile="${deployment.file}" basedir="${project.build.outputDirectory}" />
                           </tasks>
                        </configuration>
                        <goals>
                           <goal>run</goal>
                        </goals>
                     </execution>
                     <execution>
                        <id>deploy-jar-meta-inf</id>
                        <phase>package</phase>
                        <configuration>
                           <tasks>
                              <property name="deployment.file" location="${rhq.deploymentDir}/${project.build.finalName}.jar" />
                              <echo>*** Updating META-INF dir in ${deployment.file}...</echo>
                              <unjar src="${project.build.directory}/${project.build.finalName}.jar" dest="${project.build.outputDirectory}">
                                 <patternset>
                                    <include name="META-INF/**" />
                                 </patternset>
                              </unjar>
                              <jar destfile="${deployment.file}"
                                   manifest="${project.build.outputDirectory}/META-INF/MANIFEST.MF"
                                   update="true">
                              </jar>
                           </tasks>
                        </configuration>
                        <goals>
                           <goal>run</goal>
                        </goals>
                     </execution>
                     <execution>
                        <id>undeploy</id>
                        <phase>clean</phase>
                        <configuration>
                           <tasks>
                              <property name="deployment.file" location="${rhq.deploymentDir}/${project.build.finalName}.jar" />
                              <echo>*** Deleting ${deployment.file}...</echo>
                              <delete file="${deployment.file}" />
                           </tasks>
                        </configuration>
                        <goals>
                           <goal>run</goal>
                        </goals>
                     </execution>
                  </executions>
               </plugin>
            </plugins>
         </build>
      </profile>
   </profiles>

   <repositories>
      <repository>
         <id>jboss</id>
         <name>JBoss Repository</name>
         <url>http://repository.jboss.org/maven2/</url>
         <snapshots>
            <enabled>false</enabled>
         </snapshots>
      </repository>
   </repositories>

   <pluginRepositories>
      <pluginRepository>
         <id>jboss</id>
         <name>JBoss Plugin Repository</name>
         <url>http://repository.jboss.org/maven2/</url>
         <snapshots>
            <enabled>false</enabled>
         </snapshots>
      </pluginRepository>
   </pluginRepositories>
</project>
