<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>rhq-integration-tests</artifactId>
        <groupId>org.rhq</groupId>
        <version>4.4.0.JON310-SNAPSHOT</version>
    </parent>

    <groupId>org.rhq</groupId>
    <artifactId>apache-plugin-test</artifactId>
    <packaging>jar</packaging>

    <name>Apache plugin integration test</name>
    <description>Apache plugin integration tests</description>

    <properties>
        <byteman.version>1.5.2</byteman.version>
        <httpd.version>2.2.17</httpd.version>
        <httpd.install.dir>${basedir}/target/itest/httpd</httpd.install.dir>
        <!-- override these two to match the machine you will be running the tests on -->
        <system.type>rhel6</system.type>
        <system.architecture>i386</system.architecture>
    </properties>

    <repositories>
        <!-- This repository contains an artifact for the httpd binary as described below
             in the dependencies section. It doesn't make sense to push a httpd binary 
             that is very platform specific into a public maven repository. 
             If you really want to run this integration test you have to build the artifact 
             as described below and put it in your own repo. It's not that hard and the RHQ 
             team is more than happy to help you out with that :)
        -->
        <repository>
            <id>Httpd binary repo</id>
            <name>Repository containing a binaries of httpd to be used with the tests</name>
            <url>${httpd.binary.maven.repo}</url>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>org.rhq</groupId>
            <artifactId>rhq-apache-plugin</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
    
        <dependency>
            <groupId>org.rhq</groupId>
            <artifactId>test-utils</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.rhq</groupId>
            <artifactId>rhq-core-plugin-container</artifactId>
            <version>${project.version}</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        
        <!-- The expected layout of the httpd zip is:
            
            httpd-${httpd.version}-${system.type}-${system.architecture}.zip
            |-httpd
              |- ( ... the build of apache configured as suggested below ... )
        
            the httpd is expected to be built with most of the modules not built in:
            
            (the '- -' below is in reality a double hypen which is not allowed in XML
             comments)
            cd $HTTPD_CHECKOUT
            ./configure - -enable-modules=all - -enable-mods-shared=most - -prefix='somewhere' 
            
            after the build successfully finishes, it is necessary to update the apachectl
            script and envvars and envvars-std files in the bin directory of the build target
            (configured using the "prefix" option to the configure script)
            Those files contain the hardcoded path to the build target directory which needs
            to be replaced by the literal ${server.root} so that the tests can update the files
            with the actual server root before the tests get executed.
            
         -->
        <dependency>
            <groupId>org.apache</groupId>
            <artifactId>httpd</artifactId>
            <version>${httpd.version}</version>
            <scope>test</scope>
            <type>zip</type>
            <classifier>${system.type}-${system.architecture}</classifier>
        </dependency>
        
        <dependency>
            <groupId>org.jboss.byteman</groupId>
            <artifactId>byteman</artifactId>
            <version>${byteman.version}</version>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.jboss.byteman</groupId>
            <artifactId>byteman-install</artifactId>
            <version>${byteman.version}</version>
            <scope>test</scope>
        </dependency>        
        
        <dependency>
            <groupId>org.jboss.byteman</groupId>
            <artifactId>byteman-submit</artifactId>
            <version>${byteman.version}</version>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.jboss.byteman</groupId>
            <artifactId>byteman-bmunit</artifactId>
            <version>${byteman.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Integration testing voodoo to load and test this plugin 
                with its plugin dependencies -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <tasks>
                                <taskdef
                                    resource="net/sf/antcontrib/antcontrib.properties">
                                    <classpath>
                                        <pathelement
                                            location="${settings.localRepository}/ant-contrib/ant-contrib/${ant.contrib.version}/ant-contrib-${ant.contrib.version}.jar" />
                                    </classpath>
                                </taskdef>
                                <echo>Setting up plugin dependencies for
                                    ${project.artifactId}-${project.version}.jar...</echo>
                                <property name="settings.localRepository"
                                    location="${user.home}/.m2/repository/" />
                                <mkdir dir="target/itest" />
                                <mkdir dir="target/itest/plugins" />
                                <mkdir dir="target/itest/lib" />
                                <mkdir dir="target/itest/httpd" />
                                <copy toDir="target/itest/plugins"
                                    flatten="true">
                                    <fileset
                                        dir="${settings.localRepository}/">
                                        <include
                                            name="org/rhq/rhq-platform-plugin/${project.version}/rhq-platform-plugin-${project.version}.jar" />
                                        <include
                                            name="org/rhq/rhq-augeas-plugin/${project.version}/rhq-augeas-plugin-${project.version}.jar" />
                                        <include
                                            name="org/rhq/rhq-apache-plugin/${project.version}/rhq-apache-plugin-${project.version}.jar" />
                                    </fileset>
                                </copy>
                                <!-- We need deterministic names (i.e. that 
                                    would not change with the project version) so that we can statically reference 
                                    them in the test classes -->
                                <move todir="target/itest/plugins">
                                    <fileset dir="target/itest/plugins" />
                                    <mapper type="regexp"
                                        from="^(.*)-${project.version}\.jar$$"
                                        to="\1-for-apache-test.jar" />
                                </move>
                                <unzip dest="target/itest/lib">
                                    <fileset
                                        dir="${settings.localRepository}/org/hyperic/sigar-dist/${sigar.version}"
                                        includes="*.zip" />
                                    <patternset>
                                        <include name="**/lib/sigar.jar" />
                                        <include name="**/lib/bcel*.jar" />
                                        <include name="**/lib/*.so" />
                                        <include name="**/lib/*.sl" />
                                        <include name="**/lib/*.dll" />
                                        <include name="**/lib/*.dylib" />
                                    </patternset>
                                </unzip>
                                <move todir="target/itest/lib"
                                    flatten="true">
                                    <fileset
                                        dir="target/itest/lib/hyperic-sigar-${sigar.zip.version}">
                                        <include name="**/lib/*" />
                                    </fileset>
                                </move>
                                <delete
                                    dir="target/itest/lib/hyperic-sigar-${sigar.zip.version}" />

                                <unzip dest="target/itest/lib">
                                    <fileset
                                        dir="${augeas.zip.location}"
                                        includes="${augeas.zip.mask}" />
                                    <patternset>
                                        <include name="**/lib*/*.so" />
                                        <include name="**/lib*/*.so.*" />
                                    </patternset>
                                </unzip>
                                <!-- by default deploy the 32bit augeas libs -->
                                <move todir="target/itest/lib/">
                                    <fileset
                                        dir="target/itest/lib/augeas-native-${augeas.zip.version}/lib">
                                        <include name="**/*.so" />
                                        <include name="**/*.so.*" />
                                    </fileset>
                                </move>
                                <if>
                                    <or>
                                        <os family="unix" arch="x86_64" />
                                        <os family="unix" arch="amd64" />
                                    </or>
                                    <then>
                                        <!-- overwrite with 64bits if needed -->
                                        <move todir="target/itest/lib/">
                                            <fileset
                                                dir="target/itest/lib/augeas-native-${augeas.zip.version}/lib64">
                                                <include name="**/*.so" />
                                                <include name="**/*.so.*" />
                                            </fileset>
                                        </move>
                                    </then>
                                </if>
                                <delete
                                    dir="target/itest/lib/augeas-native-${augeas.zip.version}" />

                                <!-- Now deploy the httpd binaries -->
                                <unzip dest="target/itest/httpd">
                                    <fileset 
                                        dir="${settings.localRepository}/org/apache/httpd/${httpd.version}"
                                        includes="httpd-${httpd.version}-${system.type}-${system.architecture}.zip" />
                                </unzip>
                                <move todir="target/itest/httpd">
                                    <fileset
                                        dir="target/itest/httpd/httpd" />
                                </move>
                                <delete
                                    dir="target/itest/httpd/httpd" />
                                <chmod perm="ugo+rx">
                                    <fileset dir="target/itest/httpd/bin" />
                                </chmod>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
                <executions>
                    <execution>
                        <id>surefire-it</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skip>${maven.test.skip}</skip>
                            <excludedGroups>${rhq.testng.excludedGroups}</excludedGroups>
                            <useSystemClassLoader>true</useSystemClassLoader>
                            
                            <additionalClasspathElements>
                                <additionalClasspathElement>${env.JAVA_HOME}/lib/tools.jar</additionalClasspathElement>
                            </additionalClasspathElements>
                            <!--<argLine>-Dorg.hyperic.sigar.path=${basedir}/target/itest/lib 
                                -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</argLine> -->
                            <environmentVariables>
                                <LD_LIBRARY_PATH>${basedir}/target/itest/lib:${env.LD_LIBRARY_PATH}</LD_LIBRARY_PATH>
                            </environmentVariables>
                            <systemPropertyVariables>
                                <!-- <org.jboss.byteman.verbose>true</org.jboss.byteman.verbose>  -->
                                <AugeasReferenceLeakingTest.configurationReadingInvocationCount>10</AugeasReferenceLeakingTest.configurationReadingInvocationCount>
                                <org.hyperic.sigar.path>${basedir}/target/itest/lib</org.hyperic.sigar.path>
                                <project.artifactId>${project.artifactId}</project.artifactId>
                                <project.version>${project.version}</project.version>

                                <apache2.install.dir>${httpd.install.dir}</apache2.install.dir>
                                <apache2.exe.path>${httpd.install.dir}/bin/httpd</apache2.exe.path>

                                <!-- generic configurations -->
                                <!-- 
                                <port1>defaults to 11675</port1>
                                <port2>defaults to 11676</port2>
                                <port3>defaults to 11677</port3>
                                <port4>defaults to 11678</port4>
                                <localhost>defaults to the actual localhost hostname</localhost>
                                <localhost.ip>defaults to the actual localhost ip</localhost.ip>
                                <unresolvable.host>defaults to 'unreachable.host.com'</unresolvable.host>
                                -->
                                
                                <!-- configuration of individual upgrade tests -->
                                <!-- 
                                <*.server.root>defaults to whatever path is passed to the tests - i.e. either apache2.install.dir or apache1.install.dir</*.server.root>
                                <*.document.root>defaults to 'htdocs'</*.document.root>
                                <*.listen1>defaults to ${port1}</*.listen1>
                                <*.listen2>defaults to ${port2}</*.listen2>
                                <*.listen3>defaults to ${port3}</*.listen3>
                                <*.listen4>defaults to ${port4}</*.listen4>
                                <*.servername.directive>defaults to ''</*.servername.directive>
                                <*.additional.directives>defaults to ''</*.additional.directives>
                                <*.vhost1.urls>defaults to '${localhost}:${port1}'</*.vhost1.urls>
                                <*.vhost1.servername.directive>defaults to 'ServerName ${localhost}:${port1}'</*.vhost1.servername.directive>
                                <*.vhost1.additional.directives>defaults to ''</*.vhost1.additional.directives>
                                <*.vhost2.urls>defaults to '${localhost}:${port2}'</*.vhost2.urls>
                                <*.vhost2.servername.directive>defaults to 'ServerName ${localhost}:${port2}'</*.vhost2.servername.directive>
                                <*.vhost2.additional.directives>defaults to ''</*.vhost2.additional.directives>
                                <*.vhost3.urls>defaults to '${localhost}:${port3}'</*.vhost3.urls>
                                <*.vhost3.servername.directive>defaults to 'ServerName ${localhost}:${port3}'</*.vhost3.servername.directive>
                                <*.vhost3.additional.directives>defaults to ''</*.vhost3.additional.directives>
                                <*.vhost4.urls>defaults to '${localhost}:${port4}'</*.vhost4.urls>
                                <*.vhost4.servername.directive>defaults to 'ServerName ${localhost}:${port4}'</*.vhost4.servername.directive>
                                <*.vhost4.additional.directives>defaults to ''</*.vhost4.additional.directives>
                                -->
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    
</project>
