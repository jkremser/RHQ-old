<?xml version="1.0"?>

<project name="rhq-appserver-container" basedir=".">

    <property name="default.rhq.server.database.hibernate-dialect" value="org.hibernate.dialect.PostgreSQLDialect" />
    <property name="default.rhq.server.database.connection-url"    value="jdbc:postgresql://127.0.0.1:5432/rhq" />
    <property name="default.rhq.server.database.user-name"          value="rhqadmin" />
    <property name="default.rhq.server.database.password"           value="rhqadmin" />
    <property name="default.rhq.server.database.password.encrypted" value="1eeb2f255e832171df8592078de921bc" />
    <property name="default.rhq.server.database.type-mapping"       value="PostgreSQL" />

    <!-- these are needed for the PostgreSQL XADataSource setup -->
    <property name="default.rhq.server.database.server-name"        value="127.0.0.1" />
    <property name="default.rhq.server.database.port"               value="5432" />
    <property name="default.rhq.server.database.db-name"            value="rhq" />
    <property name="default.rhq.server.quartz.driverDelegateClass"  value="org.quartz.impl.jdbcjobstore.PostgreSQLDelegate" />
    <property name="default.rhq.server.quartz.selectWithLockSQL"    value="SELECT * FROM {0}LOCKS ROWLOCK WHERE LOCK_NAME = ? FOR UPDATE" />
    <property name="default.rhq.server.quartz.lockHandlerClass"     value="org.quartz.impl.jdbcjobstore.StdRowLockSemaphore" />

    <property name="rhq.sync.endpoint-address" value="false"/>

    <property name="default.rhq.server.drift.binary.content" value="false"/>

	<property name="default.jboss.bind.address" value=""/>

	<property name="default.rhq.server.management.password" value=""/>

    <target name="set-predeploy-prop">
        <condition property="predeploy" value="true">
            <or>
                <equals arg1="${dev.profile.active}" arg2="true" />
                <equals arg1="${developer}" arg2="true" />
            </or>
        </condition>
    </target>

    <target name="set-dev-server-props" if="predeploy">
        <echo>*** Using dev database settings in rhq-server.properties...</echo>
        <property name="rhq.server.database.hibernate-dialect" value="${rhq.dev.ds.hibernate-dialect}" />
        <property name="rhq.server.database.connection-url"    value="${rhq.dev.ds.connection-url}" />
        <property name="rhq.server.database.user-name"         value="${rhq.dev.ds.user-name}" />
        <property name="rhq.server.database.password"          value="${rhq.dev.ds.password.encrypted}" />
        <property name="rhq.server.database.type-mapping"      value="${rhq.dev.ds.type-mapping}" />
        <property name="rhq.server.database.server-name"       value="${rhq.dev.ds.server-name}" />
        <property name="rhq.server.database.port"              value="${rhq.dev.ds.port}" />
        <property name="rhq.server.database.db-name"           value="${rhq.dev.ds.db-name}" />
        <property name="rhq.server.quartz.driverDelegateClass" value="${rhq.dev.quartz.driverDelegateClass}" />
        <property name="rhq.server.quartz.selectWithLockSQL"   value="${rhq.dev.quartz.selectWithLockSQL}" />
        <property name="rhq.server.quartz.lockHandlerClass"    value="${rhq.dev.quartz.lockHandlerClass}" />
        <property name="rhq.server.drift.store-binary-content" value="${default.rhq.server.drift.binary.content}"/>
        <!-- these two are only set explicitly in dev envs, prod envs must set these manually for security -->
        <property name="jboss.bind.address"                    value="0.0.0.0"/>
        <property name="rhq.server.management.password"        value="35c160c1f841a889d4cda53f0bfc94b6"/>
    </target>

    <target name="set-default-server-props" unless="predeploy">
        <echo>*** Using default database settings in rhq-server.properties...</echo>
        <property name="rhq.server.database.hibernate-dialect" value="${default.rhq.server.database.hibernate-dialect}" />
        <property name="rhq.server.database.connection-url"    value="${default.rhq.server.database.connection-url}" />
        <property name="rhq.server.database.user-name"         value="${default.rhq.server.database.user-name}" />
        <property name="rhq.server.database.password"          value="${default.rhq.server.database.password.encrypted}" />
        <property name="rhq.server.database.type-mapping"      value="${default.rhq.server.database.type-mapping}" />
        <property name="rhq.server.database.server-name"       value="${default.rhq.server.database.server-name}" />
        <property name="rhq.server.database.port"              value="${default.rhq.server.database.port}" />
        <property name="rhq.server.database.db-name"           value="${default.rhq.server.database.db-name}" />
        <property name="rhq.server.quartz.driverDelegateClass" value="${default.rhq.server.quartz.driverDelegateClass}" />
        <property name="rhq.server.quartz.selectWithLockSQL"   value="${default.rhq.server.quartz.selectWithLockSQL}" />
        <property name="rhq.server.quartz.lockHandlerClass"    value="${default.rhq.server.quartz.lockHandlerClass}" />
        <property name="rhq.server.drift.store-binary-content" value="${default.rhq.server.drift.binary.content}"/>
        <!-- these two are only set by default in dev envs, prod envs must set these manually for security -->
        <property name="jboss.bind.address"                    value="${default.jboss.bind.address}"/>
        <property name="rhq.server.management.password"        value="${default.rhq.server.management.password}"/>
    </target>

    <target name="initialize" depends="set-predeploy-prop, set-dev-server-props, set-default-server-props">
        <echo>*** Database type is ${rhq.server.database.type-mapping}</echo>
        <property name="jboss.home" location="${project.build.outputDirectory}/jbossas" />

        <!-- TODO: if JBossAS has a marker file that we can check to see if server is running, we can use it here -->
        <!--
            <property name="marker.file" location="${jboss.home}/server/default/data/hypersonic/localDB.lck" />
            <fail message="The RHQ container appears to be currently running (${marker.file} exists). Please stop the container before rebuilding it in place.">
                <condition>
                    <available file="${marker.file}" />
                </condition>
            </fail>
        -->

        <!-- we will put our own JBossAS modules in our own location - this will augment JBossAS's own modules -->
        <property name="jboss.modules.dir" location="${project.build.outputDirectory}/modules" />
        <mkdir dir="${jboss.modules.dir}" />

        <property name="rhq.ear.dir" location="${jboss.modules.dir}/org/rhq/server-startup/main/deployments/${rhq.earName}" />

        <condition property="use-postgres" value="true">
            <contains string="${rhq.server.database.type-mapping}" substring="postgres" casesensitive="false" />
        </condition>
        <condition property="use-oracle" value="true">
            <contains string="${rhq.server.database.type-mapping}" substring="oracle" casesensitive="false" />
        </condition>

        <condition property="copy.dev.resources" value="true">
            <or>
                <equals arg1="${dev.profile.active}" arg2="true" />
                <equals arg1="${developer}" arg2="true" />
            </or>
        </condition>

        <condition property="predeploy-postgres" value="true">
            <and>
                <equals arg1="${predeploy}" arg2="true" />
                <equals arg1="${use-postgres}" arg2="true" />
            </and>
        </condition>

        <condition property="predeploy-oracle" value="true">
            <and>
                <equals arg1="${predeploy}" arg2="true" />
                <equals arg1="${use-oracle}" arg2="true" />
            </and>
        </condition>

        <!-- developers might want to deploy agent/server plugins frequently, so we'll scan every 30 seconds -->
        <!-- in production, plugins change very infrequently, so only scan every 5 minutes -->
        <condition property="rhq.server.plugin-scan-period-ms" value="30000">
            <or>
                <equals arg1="${dev.profile.active}" arg2="true" />
                <equals arg1="${developer}" arg2="true" />
            </or>
        </condition>
        <condition property="rhq.server.plugin-scan-period-ms" value="300000">
            <not>
                <or>
                    <equals arg1="${dev.profile.active}" arg2="true" />
                    <equals arg1="${developer}" arg2="true" />
                </or>
            </not>
        </condition>

        <!-- when predeploying, don't make people edit rhq-server.properties - turn on the auto-installer now -->
        <condition property="rhq.autoinstall.enabled" value="true">
            <equals arg1="${predeploy}" arg2="true" />
        </condition>
        <condition property="rhq.autoinstall.enabled" value="false">
            <not>
                <equals arg1="${predeploy}" arg2="true" />
            </not>
        </condition>

    </target>

    <target name="prepare-container"
            depends="prepare-jbossas-dir,
                     prepare-bin-dir" />

    <target name="prepare-jbossas-dir"
            depends="initialize"
            description="prepare JBossAS for hosting the RHQ Server">

        <echo>*** Preparing jbossas dir ***</echo>

        <echo>Unzipping vanilla JBoss dist zipfile found at ${jboss.zip}</echo>
        <condition property="jboss.uptodate">
            <and>
                <uptodate srcfile="${jboss.zip}" targetfile="${jboss.home}" />
                <available file="${jboss.home}/jboss-modules.jar" type="file" />
            </and>
        </condition>

        <antcall target="unzip-jboss" />

        <echo>Checking that we have a valid JBossAS distribution...</echo>
        <available file="${jboss.home}/jboss-modules.jar" type="file" property="jboss.home.is.valid" />
        <fail unless="jboss.home.is.valid" message="${jboss.home} does not contain a valid JBossAS installation - aborting!" />

        <echo>Adding main EAR app module to ${jboss.modules.dir} ...</echo>
        <unzip src="${settings.localRepository}/org/rhq/server-startup/${project.version}/server-startup-${project.version}.zip"
               dest="${jboss.modules.dir}" />

        <echo>Adding installer module to ${jboss.modules.dir} ...</echo>
        <unzip src="${settings.localRepository}/org/rhq/rhq-installer-util/${project.version}/rhq-installer-util-${project.version}.zip"
               dest="${jboss.modules.dir}" />

        <echo>Adding Cassandra installer module to ${jboss.modules.dir}...</echo>
        <unzip src="${settings.localRepository}/org/rhq/rhq-cassandra-installer/${project.version}/rhq-cassandra-installer-${project.version}.zip"
               dest="${jboss.modules.dir}"/>

        <echo>Adding data migration module to ${jboss.modules.dir}...</echo>
        <unzip src="${settings.localRepository}/org/rhq/rhq-data-migration/${project.version}/rhq-data-migration-${project.version}.zip"
             dest="${jboss.modules.dir}"/>

        <echo>Adding RHQ Server Control module to ${jboss.modules.dir}...</echo>
        <unzip src="${settings.localRepository}/org/rhq/rhq-server-control/${project.version}/rhq-server-control-${project.version}.zip"
               dest="${jboss.modules.dir}"/>

        <echo>Updating module descriptor for sun.jdk to work around https://issues.jboss.org/browse/AS7-2138</echo>
        <copy file="src/main/bin-resources/jbossas/modules/system/layers/base/sun/jdk/main/module.xml"
              tofile="${jboss.home}/modules/system/layers/base/sun/jdk/main/module.xml"
              overwrite="true"/>

        <echo>Adding JDBC modules to ${jboss.modules.dir} ...</echo>
    	<!-- make sure we have an oracle driver jar so the AS7 module is valid and loadable, this is empty -->
        <copy file="src/main/module-resources/ojdbc6-readme.jar"
        	  toFile="${jboss.modules.dir}/org/rhq/oracle/main/ojdbc6-${ojdbc6.version}.jar"
        	  failonerror="false" verbose="true" />
    	<!-- if we have access to the real driver then overwrite the dummy version-->
        <copy file="${settings.localRepository}/com/oracle/ojdbc6/${ojdbc6.version}/ojdbc6-${ojdbc6.version}.jar"
              toDir="${jboss.modules.dir}/org/rhq/oracle/main" overwrite="true" failonerror="false" verbose="true" />
        <echo file="${jboss.modules.dir}/org/rhq/oracle/main/module.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<module xmlns="urn:jboss:module:1.1" name="org.rhq.oracle">
    <resources>
        <resource-root path="ojdbc6-${ojdbc6.version}.jar"/>
    </resources>
    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>
]]></echo>

        <copy file="${settings.localRepository}/postgresql/postgresql/${postgresql.version}/postgresql-${postgresql.version}.jar"
              toDir="${jboss.modules.dir}/org/rhq/postgres/main" verbose="true" />
        <echo file="${jboss.modules.dir}/org/rhq/postgres/main/module.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<module xmlns="urn:jboss:module:1.1" name="org.rhq.postgres">
    <resources>
        <resource-root path="postgresql-${postgresql.version}.jar"/>
    </resources>
    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>
]]></echo>

      <echo>Adding DataStax Java Cassandra Driver module to ${jboss.modules.dir}</echo>
      <copy file="${settings.localRepository}/com/datastax/cassandra/cassandra-driver-core/${cassandra.driver.version}/cassandra-driver-core-${cassandra.driver.version}.jar"
            toDir="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main" verbose="true"/>
      <copy file="${settings.localRepository}/io/netty/netty/${cassandra.driver.netty.version}/netty-${cassandra.driver.netty.version}.jar"
            toDir="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main" verbose="true"/>
      <copy file="${settings.localRepository}/org/apache/cassandra/cassandra-all/${cassandra.version}/cassandra-all-${cassandra.version}.jar"
            toDir="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main" verbose="true"/>
      <copy file="${settings.localRepository}/org/apache/cassandra/cassandra-thrift/${cassandra.version}/cassandra-thrift-${cassandra.version}.jar"
            toDir="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main" verbose="true"/>
      <copy file="${settings.localRepository}/org/apache/cassandra/deps/avro/1.4.0-cassandra-1/avro-1.4.0-cassandra-1.jar"
            toDir="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main" verbose="true"/>
      <copy file="${settings.localRepository}/org/apache/thrift/libthrift/${cassandra.thrift.version}/libthrift-${cassandra.thrift.version}.jar"
            toDir="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main" verbose="true"/>
      <copy file="${settings.localRepository}/com/google/guava/guava/14.0.1/guava-14.0.1.jar"
            toDir="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main" verbose="true"/>
      <copy file="${settings.localRepository}/com/yammer/metrics/metrics-core/2.2.0/metrics-core-2.2.0.jar"
            toDir="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main" verbose="true"/>
      <copy file="${settings.localRepository}/org/slf4j/slf4j-api/1.7.2/slf4j-api-1.7.2.jar"
            toDir="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main" verbose="true"/>
      <copy file="${settings.localRepository}/org/slf4j/slf4j-log4j12/1.7.2/slf4j-log4j12-1.7.2.jar"
            toDir="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main" verbose="true"/>
      <copy file="${settings.localRepository}/org/xerial/snappy/snappy-java/${cassandra.snappy.version}/snappy-java-${cassandra.snappy.version}.jar"
            toDir="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main" verbose="true"/>

      <echo file="${jboss.modules.dir}/com/datastax/cassandra/cassandra-driver-core/main/module.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<module xmlns="urn:jboss:module:1.1" name="com.datastax.cassandra.cassandra-driver-core">
    <resources>
        <resource-root path="cassandra-driver-core-${cassandra.driver.version}.jar"/>
        <resource-root path="netty-${cassandra.driver.netty.version}.jar"/>
        <resource-root path="cassandra-all-${cassandra.version}.jar"/>
        <resource-root path="cassandra-thrift-${cassandra.version}.jar"/>
        <resource-root path="libthrift-${cassandra.thrift.version}.jar"/>
        <resource-root path="guava-14.0.1.jar"/>
        <resource-root path="metrics-core-2.2.0.jar"/>
        <resource-root path="slf4j-api-1.7.2.jar"/>
        <resource-root path="slf4j-log4j12-1.7.2.jar"/>
        <resource-root path="snappy-java-${cassandra.snappy.version}.jar"/>
        <resource-root path="avro-1.4.0-cassandra-1.jar"/>
    </resources>

    <dependencies>
        <module name="org.codehaus.jackson.jackson-core-asl"/>
        <module name="org.codehaus.jackson.jackson-mapper-asl"/>
        <module name="org.jboss.logging"/>
        <module name="org.jboss.logmanager" services="import"/>
        <module name="org.apache.log4j"/>
        <module name="javax.api"/>
    </dependencies>
</module>
]]></echo>

      <echo>Adding Apache Commons Exec module to ${jboss.home}/modules</echo>
      <copy file="${settings.localRepository}/org/apache/commons/commons-exec/1.1/commons-exec-1.1.jar"
            toDir="${jboss.modules.dir}/org/apache/commons/exec/main" verbose="true"/>
      <echo file="${jboss.modules.dir}/org/apache/commons/exec/main/module.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<module xmlns="urn:jboss:module:1.1" name="org.apache.commons.exec">
    <resources>
        <resource-root path="commons-exec-1.1.jar"/>
    </resources>
</module>
]]></echo>

        <echo>Updating JGroups module component for EAP to ${jgroups.patch.version}</echo>
        <!-- Remove the unpatched version -->
        <delete file="${jboss.home}/modules/system/layers/base/org/jgroups/main/jgroups-${jgroups.initial.version}.jar" />
        <delete file="${jboss.home}/modules/system/layers/base/org/jgroups/main/jgroups-${jgroups.initial.version}.jar.index" />
        <!-- Update the module metadata to the patched version -->
        <replace file="${jboss.home}/modules/system/layers/base/org/jgroups/main/module.xml"
        token="jgroups-${jgroups.initial.version}.jar" value="jgroups-${jgroups.patch.version}.jar"/>
        <!-- Copy in patched version -->
        <copy file="${settings.localRepository}/org/jgroups/jgroups/${jgroups.patch.version}/jgroups-${jgroups.patch.version}.jar"
            toDir="${jboss.home}/modules/system/layers/base/org/jgroups/main" verbose="true"/>

        <echo>Generate SSL key for RHQ server - 128-bit key that expires in 20 years</echo>
        <property name="jboss.conf.dir" location="${jboss.home}/standalone/configuration" />
        <available file="${jboss.conf.dir}/rhq.keystore" type="file" property="rhq.keystore.exists" />
        <antcall target="generate-rhq-ssl-key" />

        <echo>Delete the various working directories if they happen to exist</echo>
        <delete dir="${jboss.home}/standalone/data" />
        <delete dir="${jboss.home}/standalone/log" />
        <delete dir="${jboss.home}/standalone/tmp" />
        <delete dir="${jboss.home}/standalone/work" /> <!-- TODO: does AS7 still have this? -->

        <echo>Delete unused configurations and other files</echo>
        <delete>
            <fileset dir="${jboss.home}/standalone/configuration">
                <include name="standalone-ha.xml" />
                <include name="standalone.xml" />
                <include name="standalone-osgi.xml" />
                <include name="standalone-full-ha.xml" />
            </fileset>
        </delete>
        <delete>
            <fileset dir="${jboss.home}/bin/">
                <include name="add-user.*" />
                <include name="appclient.*" />
                <include name="domain.*" />
                <include name="jconsole.*" />
                <include name="run.*" />
                <include name="vault.*" />
            </fileset>
        </delete>
        <delete dir="${jboss.home}/bin/init.d" />

        <echo>Delete docs, README, et. al. files</echo>
        <delete dir="${jboss.home}/docs/examples" />
        <delete>
            <fileset dir="${jboss.home}" includes="*.txt" />
        </delete>

        <echo>Delete domain files - we only start in standalone mode</echo>
        <delete dir="${jboss.home}/domain" />

        <antcall target="prepare-welcome-content" />

        <!-- TODO: setup our own welcome-content that points to our app -->
        <!--
        <echo>Setup welcome content</echo>
        <delete dir="${jboss.home}/welcome-content" />
        -->

        <echo>Make sure the top level downloads directory exists</echo>
        <mkdir dir="${rhq.ear.dir}/rhq-downloads" />

        <echo>Deploying static downloadable content</echo>
        <copy todir="${rhq.ear.dir}/rhq-downloads"
              verbose="true"
              failonerror="false">
            <fileset dir="${basedir}/src/main/downloadable-resources" />
        </copy>

        <echo>Make sure our downloads directories exist</echo>
        <mkdir dir="${rhq.ear.dir}/rhq-downloads/rhq-agent" />
        <mkdir dir="${rhq.ear.dir}/rhq-downloads/rhq-client" />
        <mkdir dir="${rhq.ear.dir}/rhq-downloads/rhq-plugins" />
        <mkdir dir="${rhq.ear.dir}/rhq-downloads/connectors" />
        <mkdir dir="${rhq.ear.dir}/rhq-downloads/bundle-deployer" />

        <echo>Deploying the latest agent update binary and renaming it rhq-enterprise-agent-${rhq.version}.jar</echo>
        <copy file="${settings.localRepository}/org/rhq/rhq-enterprise-agentupdate/${rhq.version}/rhq-enterprise-agentupdate-${rhq.version}.jar"
              tofile="${rhq.ear.dir}/rhq-downloads/rhq-agent/rhq-enterprise-agent-${rhq.version}.jar"
              verbose="true"
              failonerror="true"/>

        <echo>Deploying the latest remote client binary</echo>
        <copy file="${settings.localRepository}/org/rhq/rhq-remoting-cli/${rhq.version}/rhq-remoting-cli-${rhq.version}.zip"
              tofile="${rhq.ear.dir}/rhq-downloads/rhq-client/rhq-remoting-cli-${rhq.version}.zip"
              verbose="true"
              failonerror="false"/>

        <echo>Deploying the latest command-line bundle deployer to the downloads location</echo>
        <copy file="${settings.localRepository}/org/rhq/rhq-ant-bundle-common/${rhq.version}/rhq-ant-bundle-common-${rhq.version}.zip"
              tofile="${rhq.ear.dir}/rhq-downloads/bundle-deployer/rhq-bundle-deployer-${rhq.version}.zip"
              verbose="true"
              failonerror="false"/>

        <antcall target="package-connectors" />

        <!-- we don't need these in our modules directory because we deploy the rtfilter directly in the EAR
        <echo>Deploying RT filter jar ...</echo>
        <unzip src="${settings.localRepository}/org/rhq/helpers/rhq-rtfilter/${project.version}/rhq-rtfilter-${project.version}.zip"
               dest="${jboss.modules.dir}" />

        <unzip src="${settings.localRepository}/org/rhq/helpers/rhq-rtfilter-subsystem/${project.version}/rhq-rtfilter-subsystem-${project.version}.zip"
               dest="${jboss.modules.dir}" />
        -->

    </target>

    <target name="prepare-welcome-content">
      <echo>Changing the default welcome content</echo>
      <!-- Simple redirect script written in EcmaScript checking if the server has fully started -->
      <replaceregexp file="${jboss.home}/welcome-content/index.html" flags="gis" match='&lt;body&gt;' replace='
        &lt;body>&#xA;
        &lt;script type="text/JavaScript">&#xA;
          &lt;!--&#xA;
          function httpGet() {&#xA;
            var url = "/portal/sessionAccess";&#xA;
            var xmlHttp = null;&#xA;
            xmlHttp = new XMLHttpRequest();&#xA;
            xmlHttp.open("GET", url, false);&#xA;
            xmlHttp.send(null);&#xA;
            return xmlHttp.responseText;&#xA;
          }&#xA;
          function checkIfRunning() {&#xA;
            var response = httpGet();&#xA;
            if (response.trim() === "true") {&#xA;
              location.href = "/coregui";&#xA;
            } else {&#xA;
              var el = document.getElementById("progress");
              if (el != null) {&#xA;
                el.innerHTML= el.innerHTML.trim() + ".";&#xA;
              }&#xA;
              setTimeout("checkIfRunning();", 4000);&#xA;
            }&#xA;
          }&#xA;
          checkIfRunning();&#xA;
          -->&#xA;
        &lt;/script>'/>

      <!-- Changing the default content of the welcome page -->
      <replaceregexp file="${jboss.home}/welcome-content/index.html" flags="gis" match='&lt;div class="section">(.*?)&lt;/div>' replace='
        &lt;div class="section">&#xA;
          &lt;h1>EAP 6 Notification&lt;/h1>&#xA;
          &lt;h3>Your RHQ Server is being started, please wait.&lt;/h3>&#xA;
          &lt;p class="WarnBlock" id="progress">Starting..&lt;/p>&#xA;
          &lt;sub>You will be automatically redirected once the RHQ server is up and running. If this takes more than 10 minutes, please check the server log for possible issues.&lt;/sub>&#xA;
        &lt;/div>'/>
    </target>

    <target name="package-connectors">
        <echo>Packaging the response-time (RT) servlet filter connectors ...</echo>
        <delete file="${rhq.ear.dir}/rhq-downloads/connectors/connector-rtfilter.zip" />
        <zip destfile="${rhq.ear.dir}/rhq-downloads/connectors/connector-rtfilter.zip">
            <zipfileset dir="${settings.localRepository}/org/rhq/helpers/rhq-rtfilter/${project.version}">
                <include name="rhq-rtfilter-${project.version}.jar" />
            </zipfileset>
            <zipfileset dir="${settings.localRepository}/commons-logging/commons-logging/1.1.1">
                <include name="commons-logging-1.1.1.jar" />
            </zipfileset>
        </zip>

        <!-- rtfilter AS7 modules -->
        <copy file="${settings.localRepository}/org/rhq/helpers/rhq-rtfilter/${project.version}/rhq-rtfilter-${project.version}.zip"
              tofile="${rhq.ear.dir}/rhq-downloads/connectors/rhq-rtfilter-module.zip" />

        <copy file="${settings.localRepository}/org/rhq/helpers/rhq-rtfilter-subsystem/${project.version}/rhq-rtfilter-subsystem-${project.version}.zip"
              tofile="${rhq.ear.dir}/rhq-downloads/connectors/rhq-rtfilter-subsystem-module.zip" />
    </target>

    <target name="prepare-bin-dir">
        <echo>*** Preparing bin dir ***</echo>

      <loadproperties>
        <zipentry zipfile="${settings.localRepository}/org/rhq/rhq-cassandra-ccm-core/${project.version}/rhq-cassandra-ccm-core-${project.version}.jar"
                  name="cassandra.properties"/>
      </loadproperties>

        <echo>Connection URL is ${rhq.server.database.connection-url}</echo>

        <property name="rhq.bin.dir" location="${project.build.outputDirectory}/bin" />
        <mkdir dir="${rhq.bin.dir}" />
        <echo file="${rhq.bin.dir}/rhq-server.properties">#################### RHQ Server Configuration Properties ####################

#############################################################################
# Database Settings
# -----------------
# INSTALLATION ACTION REQUIRED!
#   All properties must be explicitly set for the desired database vendor:
#   
#
# These should point to the database that your RHQ Server will use as
# its backend RDBMS storage.
# If you are using Oracle, comment out the Postgres settings and
# uncomment the Oracle settings below, adjusting the values as appropriate.
# NOTE: rhq.server.database.password is not to be set to the actual password
# but instead should be the password in encoded form as generated by:
#    rhq-installer.sh(.bat) --dbpassword=&lt;your password>
#############################################################################

# PostgreSQL database
rhq.server.database.connection-url=${rhq.server.database.connection-url}
rhq.server.database.user-name=${rhq.server.database.user-name}
rhq.server.database.password=${rhq.server.database.password}
rhq.server.database.type-mapping=${rhq.server.database.type-mapping}
rhq.server.database.server-name=${rhq.server.database.server-name}
rhq.server.database.port=${rhq.server.database.port}
rhq.server.database.db-name=${rhq.server.database.db-name}
hibernate.dialect=${rhq.server.database.hibernate-dialect}
rhq.server.quartz.driverDelegateClass=${rhq.server.quartz.driverDelegateClass}

# Oracle database
#rhq.server.database.connection-url=jdbc:oracle:thin:@127.0.0.1:1521:xe
#rhq.server.database.user-name=${rhq.server.database.user-name}
#rhq.server.database.password=${rhq.server.database.password}
#rhq.server.database.type-mapping=Oracle10g
#rhq.server.database.server-name=unused
#rhq.server.database.port=unused
#rhq.server.database.db-name=unused
#hibernate.dialect=org.hibernate.dialect.Oracle10gDialect
#rhq.server.quartz.driverDelegateClass=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate

#############################################################################
# Server Settings
# ---------------
# INSTALLATION ACTION REQUIRED! The following property must be explicitly set:
#   rhq.server.management.password
#
# These are miscellaneous settings that the server will use to customize itself
# to the environment in which it is running. These are settings you usually
# want to change or at least be aware of.
#############################################################################

# Defines what this server's name is to be known as to the RHQ system.
# It doesn't necessarily have to be an IP address or hostname, but it can be.
# If left blank, the RHQ Server will pick a name for itself based on the
# hostname it is running on.
# NOTE! If you are upgrading an existing server, this must be the same name
# as the server being upgraded.
rhq.server.high-availability.name=

# The installer will create a default EAP management user named 'rhqadmin'.
# The password is obfuscated and specified here. If set to the commented
# value the RHQ Agent will be able to monitor the RHQ Server resource
# automatically. If set to a different value the same password value will
# need to be supplied in the connection properties for the RHQ Server
# resource. See the installation documentation for more information on how
# to generate an obfuscated password value.
# rhq.server.management.password=35c160c1f841a889d4cda53f0bfc94b6
rhq.server.management.password=${rhq.server.management.password}

# Email settings used to connect to an SMTP server to send alert emails.
rhq.server.email.smtp-host=localhost
rhq.server.email.smtp-port=25
rhq.server.email.from-address=rhqadmin@localhost

#############################################################################
# Host and Port Bindings
# ----------------------
# INSTALLATION ACTION REQUIRED! The following property must be explicitly set:
#   jboss.bind.address
#
# These define the ports the RHQ Server will bind to. Most of the time
# you can leave these alone. You can change these default values to
# conform to your own environment's requirements, such as the IP address
# the RHQ Server will bind to (jboss.bind.address) and the ports
# browsers will use to access the RHQ web application
# (rhq.server.socket.binding.port.http, rhq.server.socket.binding.port.https)
# If you change the binding address, you might also want to change
# "rhq.autoinstall.public-endpoint-address" as well.
#############################################################################

# The bind address for the RHQ server (jboss server).  To bind the server on
# all network interfaces set to 0.0.0.0, otherwise a specific IP address.
# jboss.bind.address=0.0.0.0
jboss.bind.address=${jboss.bind.address}

# By default only local management connections 
jboss.bind.address.management=127.0.0.1

jboss.socket.binding.port-offset=0

jboss.management.native.port=6999
jboss.management.http.port=6990
jboss.management.https.port=6443

rhq.server.socket.binding.port.ajp=7009
rhq.server.socket.binding.port.http=7080
rhq.server.socket.binding.port.https=7443
rhq.server.socket.binding.port.jacorb=2528
rhq.server.socket.binding.port.jacorb-ssl=2529
rhq.server.socket.binding.port.messaging=4445
rhq.server.socket.binding.port.messaging-throughput=4455
rhq.server.socket.binding.port.osgi-http=7090
rhq.server.socket.binding.port.remoting=3447
rhq.server.socket.binding.port.txn-recovery-environment=3712
rhq.server.socket.binding.port.txn-status-manager=3713

#############################################################################
# Installer Settings
# ------------------
# INSTALLATION ACTION REQUIRED! Review the default settings:
#
# These enable the installer when starting for the first time.
# To do so, first ensure all values in this properties file are appropriately
# set for your environment. Once you are sure all values are as you want them,
# set rhq.autoinstall.enabled=true and run the server then run the installer.
#
# rhq.autoinstall.enabled: must be true to trigger the automatic install.
# rhq.autoinstall.database: allowed values: auto, overwrite, skip
#                           "auto" will create a new schema if one does not
#                           yet exist or, if a schema does exist, will simply
#                           upgrade it as needed (which keeps existing data).
#                           "overwrite" if you want to create an empty schema,
#                           even if one already exists (loses existing data).
#                           "skip" if you don't want to do any database
#                           upgrade or creation. WARNING! You must ensure your
#                           database schema already exists and is up to date.
# rhq.autoinstall.public-endpoint-address: public IP/hostname that all agents
#                                          will use to talk to this server.
#                                          If not set, a value to use is
#                                          determined at auto-install time.
#############################################################################

rhq.autoinstall.enabled=true
rhq.autoinstall.database=auto
rhq.autoinstall.public-endpoint-address=

#############################################################################
# Advanced Settings
# -----------------
# The settings below can usually be left as-is. These are advanced settings
# and should only be changed if you know what you are doing.
#############################################################################

# Enable debug messages from RHQ code
rhq.server.log-level=INFO

# Set this to true to have the server reject agent requests upon startup.
rhq.server.maintenance-mode-at-startup=false

# RHQ Server's remote endpoint for agents to talk to
# bind-address and bind-port are derived from the HA server definition,
# if you set the address/port here, they will override the HA server
# definition found in the database
rhq.communications.connector.transport=servlet
rhq.communications.connector.bind-address=
rhq.communications.connector.bind-port=
rhq.communications.connector.transport-params=/jboss-remoting-servlet-invoker/ServerInvokerServlet

# Multicast detector configuration for auto-discovery
rhq.communications.multicast-detector.enabled=false
rhq.communications.multicast-detector.bind-address=${jboss.bind.address}
rhq.communications.multicast-detector.multicast-address=224.16.16.16
rhq.communications.multicast-detector.port=16162

# Server-side SSL Security Configuration for HTTPS thru Tomcat
# These are used for browser https access and
# for incoming messages from agents over sslservlet transport.
# [Due to issue https://issues.jboss.org/browse/WFLY-1177, you cannot change
# rhq.server.tomcat.security.keystore.file or rhq.server.tomcat.security.truststore.file
# after you install RHQ. If you need to change those again, you must manually do so in standalone-full.xml.]
# Note that security algorithm settings are commented out - the defaults will be determined at runtime
# based on the JVM the server is running in (for IBM JVMs, the algorithm will default to "IbmX509",
# for all other JVMs, the algorithm will default to "SunX509"). If you need a specific algorithm value,
# you may hardcode it here in this file by uncommenting the lines and setting the values explicitly.
rhq.server.tomcat.security.client-auth-mode=false
rhq.server.tomcat.security.secure-socket-protocol=TLS
#rhq.server.tomcat.security.algorithm=SunX509
rhq.server.tomcat.security.keystore.alias=RHQ
rhq.server.tomcat.security.keystore.file=${jboss.server.config.dir}/rhq.keystore
rhq.server.tomcat.security.keystore.password=RHQManagement
rhq.server.tomcat.security.keystore.type=JKS
rhq.server.tomcat.security.truststore.file=${jboss.server.config.dir}/rhq.truststore
rhq.server.tomcat.security.truststore.password=RHQManagement
rhq.server.tomcat.security.truststore.type=JKS

# Server-side SSL Security Configuration (for incoming messages from agents)
# These are used when secure transports other than sslservlet are used
rhq.communications.connector.security.secure-socket-protocol=TLS
rhq.communications.connector.security.keystore.file=${jboss.server.config.dir}/rhq.keystore
#rhq.communications.connector.security.keystore.algorithm=SunX509
rhq.communications.connector.security.keystore.type=JKS
rhq.communications.connector.security.keystore.password=RHQManagement
rhq.communications.connector.security.keystore.key-password=RHQManagement
rhq.communications.connector.security.keystore.alias=RHQ
rhq.communications.connector.security.truststore.file=${jboss.server.config.dir}/rhq.truststore
#rhq.communications.connector.security.truststore.algorithm=SunX509
rhq.communications.connector.security.truststore.type=JKS
rhq.communications.connector.security.truststore.password=RHQManagement
rhq.communications.connector.security.client-auth-mode=none

# Client-side SSL Security Configuration (for outgoing messages to agents)
rhq.server.client.security.secure-socket-protocol=TLS
rhq.server.client.security.keystore.file=${jboss.server.config.dir}/rhq.keystore
#rhq.server.client.security.keystore.algorithm=SunX509
rhq.server.client.security.keystore.type=JKS
rhq.server.client.security.keystore.password=RHQManagement
rhq.server.client.security.keystore.key-password=RHQManagement
rhq.server.client.security.keystore.alias=RHQ
rhq.server.client.security.truststore.file=${jboss.server.config.dir}/rhq.truststore
#rhq.server.client.security.truststore.algorithm=SunX509
rhq.server.client.security.truststore.type=JKS
rhq.server.client.security.truststore.password=RHQManagement
rhq.server.client.security.server-auth-mode-enabled=false

# Operations/controls timeout
# Defines the default timeout for all operations (specified in seconds)
rhq.server.operation-timeout=600

# Additional Quartz settings
rhq.server.quartz.selectWithLockSQL=${rhq.server.quartz.selectWithLockSQL}
rhq.server.quartz.lockHandlerClass=${rhq.server.quartz.lockHandlerClass}

# Concurrency limits for incoming UI and agent messages
rhq.server.startup.web.max-connections=200
rhq.server.agent-downloads-limit=45
rhq.server.client-downloads-limit=5
rhq.communications.global-concurrency-limit=30
rhq.server.concurrency-limit.inventory-report=5
rhq.server.concurrency-limit.availability-report=25
rhq.server.concurrency-limit.inventory-sync=10
rhq.server.concurrency-limit.content-report=5
rhq.server.concurrency-limit.content-download=5
rhq.server.concurrency-limit.measurement-report=10
rhq.server.concurrency-limit.measurement-schedule-request=10
rhq.server.concurrency-limit.configuration-update=10

# Content Local Filesystem Repository
rhq.server.content.filesystem=${jboss.server.data.dir}/packagebits

# The frequency (in millis) the server checks for updated plugins
rhq.server.plugin-scan-period-ms=${rhq.server.plugin-scan-period-ms}

# When this is enabled, the server at start up will compare its endpoint
# address to the host name/address found on the host machine. If they differ,
# the server endpoint address will be updated to the value found on the host
# machine. This is targeted for use in cloud deployments where IP addresses
# change frequently, but it can be of use in other deployment settings where
# you have to deal with IP address changes.
rhq.sync.endpoint-address=false

# When this is enabled, the server will request that agents send content for
# for binary files that are being monitored for drift. The content for those
# files will then be persisted on the server. By default, the server does not
# persist content for well known binary file types like .ear, .war, .zip, .so,
# etc. The server does however persist content for text files or any other
# files that are not known binary types.
#rhq.server.drift.store-binary-content=${rhq.server.drift.store-binary-content}

#############################################
# Cassandra cluster configuration settings
#############################################
# The username RHQ will use to authenticate against Cassandra.
rhq.storage.username=${rhq.storage.username}

# The password RHQ will use to authenticate against Cassandra.
rhq.storage.password=${rhq.storage.password}

# A comma-delimited list of storage nodes. Each Cassandra node uses this list as
# contact points to find other nodes in the cluster and learn the ring
# topology. The RHQ server(s) use this list to connect to the cluster;
# therefore, this property MUST BE SET in order for RHQ to talk to Cassandra.
# The of an entry is as follows,
#
#    hostname1,hostname2
#
# Note that this is actually an installer setting. Changing the value after
# installation will have no effect.
rhq.storage.nodes=

# The ports used by storage nodes to communicate with each other
# and used by the RHQ server(s) to communicate with the cluster.
# Both properties are required.
#
rhq.storage.cql-port=${rhq.cassandra.native-transport-port}
rhq.storage.gossip-port=${rhq.cassandra.storage.port}

# If enabled data sent to and from storage nodes will be compressed using
# snappy (https://code.google.com/p/snappy) compression. Note that this is an
# advanced configuration option. If you turn on client compression and your
# storage nodes do not support compression, then the RHQ server will not be
# able to connect to the storage cluster. The storage node will log the
# following at start up if it does not support compression,
#
# Cannot initialize native Snappy library. Compression on new tables will be disabled.
#
# Please make sure you do not find the above log statement in your storage logs
# before you enable client compression.
# rhq.cassandra.client.compression-enabled=false
</echo>

    </target>

    <target name="unzip-jboss" unless="jboss.uptodate">
        <echo>Unzipping JBossAS ${jboss.version} found at ${jboss.zip}</echo>
        <unzip src="${jboss.zip}" dest="${basedir}/target" />
        <delete dir="${jboss.home}" />

        <available property="zip.is.dir" file="${basedir}/target/jboss-as-${jboss.version}" />
        <antcall target="move-as"/>
        <antcall target="move-eap"/>
    </target>

    <!-- depending on the inner file of the zip, we need to move different files in place -->
    <target name="move-as" if="zip.is.dir">
      <move file="${basedir}/target/jboss-as-${jboss.version}" tofile="${jboss.home}" />
    </target>

    <target name="move-eap" unless="zip.is.dir">
      <move file="${basedir}/target/${jboss.eap.version}" tofile="${jboss.home}" />
    </target>

    <target name="generate-rhq-ssl-key" unless="rhq.keystore.exists">
        <echo>Generating self-signed certificate in ${jboss.conf.dir} ...</echo>
        <genkey alias="RHQ"
                keystore="${jboss.conf.dir}/rhq.keystore"
                keyalg="rsa"
                storepass="RHQManagement"
                validity="7300"
                dname="CN=RHQ, OU=RHQ, O=rhq-project.org, C=US" />
        <!-- the rhq.truststore is pre-built and checked into git. It is empty with the same store pass as above -->
    </target>

    <target name="copy-dev-resources" if="copy.dev.resources">
        <echo>Copying dev-only resources ...</echo>
        <copy todir="${project.build.outputDirectory}" verbose="true">
            <fileset dir="src/main/dev-resources" />
        </copy>
      <loadproperties>
        <zipentry zipfile="${settings.localRepository}/org/rhq/rhq-cassandra-ccm-core/${project.version}/rhq-cassandra-ccm-core-${project.version}.jar"
                  name="cassandra.properties"/>
      </loadproperties>
        <echo>Putting a developer setting in rhq-server.properties to turn on/off strict agent update version checking</echo>
        <echo file="${project.build.outputDirectory}/bin/rhq-server.properties" append="true">
rhq.server.agent-update.nonstrict-version-check=true
</echo>

<!-- We must use forward slashes when writing paths to a properties files. Properties.load()
     treats the values as Java Strings so backslashes will be parsed as escapes. -->
<path id="path.datadir">
  <pathelement location="${rhq.dev.data.dir}" />
</path>
<pathconvert targetos="unix" property="safe.datadir" refid="path.datadir"/>

<!--<echo file="${project.build.outputDirectory}/bin/rhq-storage.properties" append="true"># storage installer options for dev deployment-->
<!--commitlog=${safe.datadir}/storage/commit_log-->
<!--data=${safe.datadir}/storage/data-->
<!--saved-caches=${safe.datadir}/storage/saved_caches-->
<!--heap-size=256M-->
<!--heap-new-size=64M-->
<!--hostname=127.0.0.1-->
<!--</echo>-->

<!--<echo file="${project.build.outputDirectory}/bin/rhqctl.properties" append="true">rhqctl.install.storage-config=bin/rhq-storage.properties</echo>-->

    </target>

    <target name="prepare-release"
            description="If this is a release build, make sure it is properly prepared."
            depends="initialize,
                     developer-release-message,
                     copy-dev-resources,
                     fix-perms,
                     deploy-postgres-ds,
                     deploy-oracle-ds">

        <echo>Adding license files...</echo>
        <copy todir="${project.build.outputDirectory}">
            <fileset dir="${basedir}/../../../.." includes="LICENSE*" />
        </copy>
    </target>

    <target name="fix-perms">
        <echo>Make sure shell scripts are readable and executable.</echo>
        <chmod dir="${project.build.outputDirectory}/bin" includes="*.sh,rhqctl" perm="ug+x" verbose="true" />
        <chmod dir="${jboss.home}/bin" includes="*.sh" perm="ug+x" verbose="true" />
    </target>

    <target name="developer-release-message" if="predeploy">
        <echo>!!THIS IS A DEVELOPER CONTAINER BUILD !!</echo>
    </target>

    <target name="deploy-postgres-ds" if="predeploy-postgres">
        <echo>Postgres will be your datasource backend!</echo>
    </target>

    <target name="deploy-oracle-ds" if="predeploy-oracle">
        <echo>Oracle will be your datasource backend!</echo>
    </target>

</project>

