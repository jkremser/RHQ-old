<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE preferences SYSTEM 'http://java.sun.com/dtd/preferences.dtd'>

<!--
==============================================================================
RHQ Server Communications Configuration
==============================================================================
-->
 
<preferences EXTERNAL_XML_VERSION="1.0">
   <root type="user">
      <map />
      <node name="rhq-server">
         <map />
         <node name="default">
            <map>
               <!--
               _______________________________________________________________
               rhq.server.configuration-schema-version
               
               Defines what version of the server configuration schema this
               file conforms to.  This is the schema for the rhq.server
               preferences.
               -->
               <entry key="rhq.server.configuration-schema-version" value="1" />
               
               <!--
               _______________________________________________________________
               rhq.server.agent-files-directory
               
               This defines the directory location that contains all the files
               that can be sent remotely to agents.  If this is not defined,
               this effectively disables the server's ability to remotely
               send files to agents. If deploying within a JBossAS instance,
               leave this undefined, and set this as a configuration override
               property in the server-comm-service.xml
               deployment configuration file. This will allow you to use the
               ${jboss.server.home.dir} replacement variable expression
               as part of the directory location, for example.
               -->
               <!--
               <entry key="rhq.server.agent-files-directory" value="conf" />
               -->
               
               <!--
               _______________________________________________________________
               rhq.server.client.queue-size
               
               The maximum size of the client command queue - this is the
               maximum number of commands that can be queued for sending to
               an agent.  If this is 0, then the queue is unbounded.
               WARNING! Setting this to 0 could lead to resources being used
               up if for some reason commands keep getting queued but are
               not getting sent.
               -->
               <entry key="rhq.server.client.queue-size" value="50000" />

               <!--
               _______________________________________________________________
               rhq.server.client.max-concurrent
               
               The maximum number of concurrent commands that can be in the
               process of being sent to an agent at any one time.
               -->
               <entry key="rhq.server.client.max-concurrent" value="1" />

               <!--
               _______________________________________________________________
               rhq.server.client.command-timeout-msecs
               
               The time in milliseconds that the client sender will wait
               before aborting a command. This is the amount of time in
               milliseconds that the agent has in order to process commands.
               This value is only the default if a command has not specified
               its own timeout.  A command can override this by setting its
               own timeout in the command's configuration, so this value may
               not be used for all commands that are sent. If this value is
               less than or equal to 0, there will be no default timeout
               and commands will therefore be allowed to take as long as they
               need (again, this is the default, individual commands may
               override this and set their own timeout).  While this infinite
               timeout default could conceivably cause a thread to hang
               waiting for a rogue command that never finishes, it also reduces
               the amount of short-lived threads created by the system
               and will increase throughput, dramatically in some cases.
               -->
               <entry key="rhq.server.client.command-timeout-msecs" value="600000" />

               <!--
               _______________________________________________________________
               rhq.server.client.retry-interval-msecs
               
               This is the minimum amount of time, in milliseconds, the client
               sender will wait before trying to resend a guaranteed command
               that previously failed.  This is not a guarantee of when
               a command is retried - all that can be inferred is that a
               command that fails to be sent will not be retried until at
               least this amount of time passes.
               Note: if the sender is currently waiting in this retry pause
               period, the server will not be able to be shutdown until that
               retry period is over. In other words, if the server is asked
               to shutdown, it will wait for those commands waiting in this
               retry interval to wake up. This is to help ensure those
               commands are not lost.
               -->
               <entry key="rhq.server.client.retry-interval-msecs" value="15000" />

               <!-- 
               _______________________________________________________________
               rhq.server.client.max-retries

               If a guaranteed delivery message is sent, but the server fails
               to connect to the agent and deliver the message, it will
               always be retried. However, if the error was something other
               than a "cannot connect" error, the command will only be retried
               this amount of times before the command is dropped. When this
               happens, the guaranteed command will never be delivered. This
               will normally happen under very odd and rare circumstances.
               Also, this setting only effects asynchronous messages that
               are sent with guaranteed delivery.  This setting has no effect
               on other messages.
               -->
               <entry key="rhq.server.client.max-retries" value="10" />

               <!--
               _______________________________________________________________
               rhq.server.client.command-spool-file.name
               
               This defines the name of the command spool file.  This
               file must be located in the data directory (if one does not
               exist, it will be created).  Note that if you do not define
               this setting, the default is to not spool commands to disk
               and thus implicitly disable guaranteed delivery.
               -->
               <!--
               <entry key="rhq.server.client.command-spool-file.name" value="command-spool.dat" />
               -->

               <!--
               _______________________________________________________________
               rhq.server.client.command-spool-file.params
               
               This defines the parameters for the command spool file.
               The spool file is where the server persists commands that
               are flagged for guaranteed delivery and need to be sent.
               The format is defined as "max-file-size:purge-percentage".
               The first number is the size, in bytes, of the maximum file
               size threshold.  If the spool file grows larger than this, a
               "purge" will be triggered in order to shrink the file.
               The second number is the purge percentage which indicates how
               large the file is allowed to be after a purge.  This is
               specified as a percentage of the first parameter - the max
               file size threshold.  For example, if the max file size is
               100000 (i.e. 100KB) and the purge percentage is 90, then when
               the spool file grows larger than 100KB, a purge will be
               triggered and the file will be shrunk to no more than
               90% of 100KB - which is 90KB.  In effect, 10KB will be freed
               to allow room for new commands to be spooled.  When this
               occurs, unused space is freed first and if that does not
               free up enough space, the oldest commands in the spool file
               will be sacrificed in order to make room for the newer
               commands.
               -->
               <entry key="rhq.server.client.command-spool-file.params" value="1000000:75" />

               <!--
               _______________________________________________________________
               rhq.server.client.command-spool-file.compressed
               
               If this flag is true, the commands stored in the spool file
               will be compressed. This can potentially save about 30%-40% in
               disk space (give or take), however, it slows down the
               persistence mechanism considerably. Recommended setting for
               this should be false unless something on the server deployment
               box warrants disk-saving over persistence performance.
               -->
               <entry key="rhq.server.client.command-spool-file.compressed" value="false" />

               <!--
               _______________________________________________________________
               rhq.server.client.send-throttling
               
               If this setting is defined, it will enable send throttling to
               occur while sending commands to an agent.  The format is
               defined as "max-commands:quiet-period-milliseconds"
               where the maximum commands defines the maximum number
               of commands that will be sent before the start of a quiet
               period.  The quiet period defines the number of milliseconds
               in which no commands should be sent.  After this duration
               expires, commands can again be sent, up to the maximum defined.
               Note that send throttling only affects those commands that
               are "throttle-able".  Some commands are sent as soon as
               possible, regardless of the throttling settings.
               
               This affects sending commands synchronously and asynchronously.
               -->
               <!--
               <entry key="rhq.server.client.send-throttling" value="100:1000" />
               -->

               <!--
               _______________________________________________________________
               rhq.server.client.queue-throttling
               
               If this setting is defined, it will enable queue throttling to
               occur while sending commands to an agent.  The format is
               defined as "max-commands-per-burst:burst-period-milliseconds"
               where the maximum commands per burst defines the maximum number
               of commands that can be dequeued within a burst period.  The
               burst period defines the number of milliseconds in which the
               defined maximum number of commands can be dequeued.  If more
               than the maximum number of commands are queued within this
               time period, they will wait until the next burst period starts
               before being able to be dequeued.
               
               This does not affect sending commands synchronously.  It only
               effects commands queued to be sent asynchronously.
               -->
               <!--
               <entry key="rhq.server.client.queue-throttling" value="50:3000" />
               -->

               <!--
               _______________________________________________________________
               rhq.communications.configuration-schema-version
               
               Defines what version of the configuration schema this
               file conforms to.  This is the schema for the
               rhq.communications preferences.
               -->
               <entry key="rhq.communications.configuration-schema-version" value="1" />

               <!--
               _______________________________________________________________
               rhq.communications.service-container.mbean-server-name
               
               Name of the MBean Server that houses the communications MBean
               services.  This is actually the default domain name of the
               MBean Server and if an MBean Server has already been registered
               with this name, it will be used to house the communications
               services.  If an MBean Server has not yet been registered with
               this name as its default domain, one will be created.
               If deploying within a JBossAS instance, the JBoss MBeanServer
               will be used, so this value can be left undefined since it
               will be unused.
               -->
               <!--
               <entry key="rhq.communications.service-container.mbean-server-name" value="jboss-on" />
               -->
               
               <!--
               _______________________________________________________________
               rhq.communications.data-directory
               
               The location where the communication services write internal
               data files. If deploying within a JBossAS instance, leave
               this undefined, and set this as a configuration override
               property in the server-comm-service.xml deployment
               configuration file. This will allow you to use the
               ${jboss.server.data.dir} replacement variable as the data
               directory location.
               -->
               <!--
               <entry key="rhq.communications.data-directory" value="data" />
               -->

               <!--
               _______________________________________________________________
               rhq.communications.global-concurrency-limit
               
               The maximum number of incoming commands that are allowed to be
               received concurrently.  Any extra commands received over this
               amount will be dropped and the client will be asked to
               resend it later.
               -->
               <entry key="rhq.communications.global-concurrency-limit" value="200" />

               <!--
               _______________________________________________________________
               rhq.communications.multicast-detector.enabled
               rhq.communications.multicast-detector.multicast-address
               rhq.communications.multicast-detector.bind-address
               rhq.communications.multicast-detector.port
               rhq.communications.multicast-detector.default-time-delay
               rhq.communications.multicast-detector.heartbeat-time-delay
               
               The multicast detector configuration. This is the service that
               listens for new remote servers/agents coming on and going offline
               and is required if you want agent auto-detection. If you do not
               have auto-detection enabled or your network will not
               support multicast traffic, you should disable the multicast
               detector.
               
               The multicast-address is used to broadcast detection messages.
               To be more specific, it is the IP address of the
               multicast group the detector will join.  The bind-address
               is the IP that is bound by the network interface.

               The detector will send heartbeat messages every X milliseconds
               (this is the heartbeat-time-delay).  If external servers'
               detectors do not send their heartbeat messages within the
               default-time-delay, our detector will assume that external
               server has gone down.  These settings affect the timeliness
               of our auto-detection mechanism.
               -->
               <entry key="rhq.communications.multicast-detector.enabled"              value="false" />
               <entry key="rhq.communications.multicast-detector.multicast-address"    value="224.16.16.16" />
               <entry key="rhq.communications.multicast-detector.bind-address"         value="0.0.0.0" />
               <entry key="rhq.communications.multicast-detector.port"                 value="16162" />
               <entry key="rhq.communications.multicast-detector.default-time-delay"   value="5000" />
               <entry key="rhq.communications.multicast-detector.heartbeat-time-delay" value="1000" />
               
               <!--
               _______________________________________________________________
               rhq.communications.connector.rhqtype
               rhq.communications.connector.transport
               rhq.communications.connector.bind-port
               rhq.communications.connector.bind-address
               rhq.communications.connector.transport-params
               rhq.communications.connector.lease-period
               
               The server connector configuration.  This is the service that
               listens for incoming agent requests and passes them to the
               appropriate server-side components for processing.  See the
               JBoss/Remoting documentation for a full list of options
               that can be specified.  Note that because this is an XML file,
               you must specify "&amp;" in the transport-params value
               when needing an ampersand to separate the parameters.
               -->
               <entry key="rhq.communications.connector.rhqtype"          value="server" />
               <entry key="rhq.communications.connector.transport"        value="servlet" />
               <entry key="rhq.communications.connector.bind-port"        value="7080" />
               <entry key="rhq.communications.connector.transport-params" value="/jboss-remoting-servlet-invoker/ServerInvokerServlet" />
               <!--
               <entry key="rhq.communications.connector.bind-address"     value="127.0.0.1" />
               <entry key="rhq.communications.connector.lease-period"     value="5000" />
               -->

               <!--
               _______________________________________________________________
               rhq.communications.connector.security.secure-socket-protocol
               rhq.communications.connector.security.keystore.file
               rhq.communications.connector.security.keystore.algorithm
               rhq.communications.connector.security.keystore.type
               rhq.communications.connector.security.keystore.password
               rhq.communications.connector.security.keystore.key-password
               rhq.communications.connector.security.keystore.alias
               rhq.communications.connector.security.truststore.file
               rhq.communications.connector.security.truststore.algorithm
               rhq.communications.connector.security.truststore.type
               rhq.communications.connector.security.truststore.password
               rhq.communications.connector.security.client-auth-mode
               
               rhq.server.client.security.secure-socket-protocol
               rhq.server.client.security.keystore.file
               rhq.server.client.security.keystore.algorithm
               rhq.server.client.security.keystore.type
               rhq.server.client.security.keystore.password
               rhq.server.client.security.keystore.key-password
               rhq.server.client.security.keystore.alias
               rhq.server.client.security.truststore.file
               rhq.server.client.security.truststore.algorithm
               rhq.server.client.security.truststore.type
               rhq.server.client.security.truststore.password
               rhq.server.client.security.server-auth-mode-enabled

               These are the settings that are used if SSL is to be used for
               either the server or client communications. These can be left
               unset since the defaults will normally suffice.  These
               properties are here just in case some use case occurs that
               require one or more of these settings to be customized.
               
               Note that if client-auth-mode is specified, it must be one of:
               "none", "want", "need". To support Tomcat syntax, "true" can be used
               in place of "need" and "false" can be used in place of "none".
               -->
               <!--
               <entry key="rhq.communications.connector.security.secure-socket-protocol" value="TLS" />
               <entry key="rhq.communications.connector.security.keystore.file"          value="data/keystore.dat" />
               <entry key="rhq.communications.connector.security.keystore.algorithm"     value="SunX509" />
               <entry key="rhq.communications.connector.security.keystore.type"          value="JKS" />
               <entry key="rhq.communications.connector.security.keystore.password"      value="rhqpwd" />
               <entry key="rhq.communications.connector.security.keystore.key-password"  value="rhqpwd" />
               <entry key="rhq.communications.connector.security.keystore.alias"         value="rhq" />
               <entry key="rhq.communications.connector.security.truststore.file"        value="data/truststore.dat" />
               <entry key="rhq.communications.connector.security.truststore.algorithm"   value="SunX509" />
               <entry key="rhq.communications.connector.security.truststore.type"        value="JKS" />
               <entry key="rhq.communications.connector.security.truststore.password"    value="" />
               <entry key="rhq.communications.connector.security.client-auth-mode"       value="none" />
               
               <entry key="rhq.server.client.security.secure-socket-protocol"   value="TLS" />
               <entry key="rhq.server.client.security.keystore.file"            value="data/keystore.dat" />
               <entry key="rhq.server.client.security.keystore.algorithm"       value="SunX509" />
               <entry key="rhq.server.client.security.keystore.type"            value="JKS" />
               <entry key="rhq.server.client.security.keystore.password"        value="rhqpwd" />
               <entry key="rhq.server.client.security.keystore.alias"           value="rhq" />
               <entry key="rhq.server.client.security.keystore.key-password"    value="rhqpwd" />
               <entry key="rhq.server.client.security.truststore.file"          value="data/truststore.dat" />
               <entry key="rhq.server.client.security.truststore.algorithm"     value="SunX509" />
               <entry key="rhq.server.client.security.truststore.type"          value="JKS" />
               <entry key="rhq.server.client.security.truststore.password"      value="" />
               <entry key="rhq.server.client.security.server-auth-mode-enabled" value="false" />
               -->

               <!--
               _______________________________________________________________
               rhq.communications.remote-stream-max-idle-time-msecs
               
               The maximum amount of milliseconds a remoted stream
               is allowed to be idle before it is automatically closed and
               removed from the server. This means that a client must
               attempt to access the remoted stream every X milliseconds
               (where X is the value of this setting) or that stream will no
               longer be available. Note that this does not mean a client
               must read or write the entire stream in this amount of time,
               it only means a client must make a request on the stream every
               X milliseconds (be it to read or write one byte, see how many
               bytes are available to be read, etc).
               -->
               <entry key="rhq.communications.remote-stream-max-idle-time-msecs" value="300000" />
               
               <!--
               _______________________________________________________________
               rhq.communications.command-service-directory.allow-dynamic-discovery
               
               Flag to allow new command services to be added to the command
               services directory during runtime.  If this is false, only
               those services defined in the
               rhq.communications.command-services preference will be available
               during the lifetime of the command service directory.
               -->
               <entry key="rhq.communications.command-service-directory.allow-dynamic-discovery" value="true" />

               <!--
               _______________________________________________________________
               rhq.communications.command-services
               
               Command Services that are to be added immediately at startup.
               -->
               <entry key="rhq.communications.command-services" value="org.rhq.enterprise.communications.command.impl.echo.server.EchoCommandService, org.rhq.enterprise.communications.command.impl.identify.server.IdentifyCommandService" />

               <!--
               _______________________________________________________________
               rhq.communications.remote-pojos
               
               Objects that are to be created and their remote interfaces
               deployed immediately at startup.  The format of the value is
               a comma separated list of implementation/interface names:
               class.to.instantiate.via.noarg.constructor:interface.to.expose
               -->
               <entry key="rhq.communications.remote-pojos"
                      value="org.rhq.enterprise.communications.PingImpl:org.rhq.enterprise.communications.Ping,org.rhq.enterprise.server.core.CoreServerServiceImpl:org.rhq.core.clientapi.server.core.CoreServerService,org.rhq.enterprise.server.discovery.DiscoveryServerServiceImpl:org.rhq.core.clientapi.server.discovery.DiscoveryServerService,org.rhq.enterprise.server.measurement.MeasurementServerServiceImpl:org.rhq.core.clientapi.server.measurement.MeasurementServerService,org.rhq.enterprise.server.operation.OperationServerServiceImpl:org.rhq.core.clientapi.server.operation.OperationServerService,org.rhq.enterprise.server.configuration.ConfigurationServerServiceImpl:org.rhq.core.clientapi.server.configuration.ConfigurationServerService,org.rhq.enterprise.server.resource.ResourceFactoryServerServiceImpl:org.rhq.core.clientapi.server.inventory.ResourceFactoryServerService,org.rhq.enterprise.server.content.ContentServerServiceImpl:org.rhq.core.clientapi.server.content.ContentServerService,org.rhq.enterprise.server.event.EventServerServiceImpl:org.rhq.core.clientapi.server.event.EventServerService,org.rhq.enterprise.server.bundle.BundleServerServiceImpl:org.rhq.core.clientapi.server.bundle.BundleServerService" />

               <!--
               _______________________________________________________________
               rhq.communications.command-authenticator
               
               A command authenticator class that will be used to authenticate incoming commands.
               -->
               <entry key="rhq.communications.command-authenticator" value="org.rhq.enterprise.server.core.comm.SecurityTokenCommandAuthenticator" />

            </map>
         </node>
      </node>
   </root>
</preferences>
      